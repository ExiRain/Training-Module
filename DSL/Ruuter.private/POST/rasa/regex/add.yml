assign_values:
  assign:
    regex: ${incoming.body.name}

getRegexesList:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/regexes"
    headers:
      cookie: ${incoming.headers.cookie}
  result: regexes

validateRegexExists:
  switch:
    - condition: ${!regexes.response.body}
      next: returnRegexesError
    - condition: ${regexes.response.body.response.data.regexes.some(reg => reg.name === regex)}
      next: returnRegexExists
  next: getFileLocations

getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/return-file-locations"
    headers:
      cookie: ${incoming.headers.cookie}
  result: fileLocations

mapRegexData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-regex-file"
    body:
      regex: ${regex}
  result: regexFileJson

convertJsonToYaml:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/json-to-yaml"
    body:
      version: "3.0"
      nlu: ${regexFileJson.response.body.data}
  result: regexYaml

saveRegexFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/file/write"
    body:
      file_path: ${fileLocations.response.body.response.regex_location + regex + "_nlu.yml"}
      content: ${regexYaml.response.body.json}
  result: fileResult

removePipe:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/convert/string/replace"
    body:
      data: ${regexYaml.response.body.json}
      search: "|"
      replace: ""
  result: removedPipeline

addInPipeline:
  call: http.post
  args:
    url: "[#TRAINING_PIPELINE]/put/regexes/regex"
    body:
      input: ${removedPipeline.response.body}
  result: updateSearchResult

returnSuccess:
  return: "Regex created"
  next: end

returnRegexExists:
  status: 409
  return: "Intent with that name already exists"
  next: end

returnRegexesError:
  status: 409
  return: "Regex parsing error"
  next: end